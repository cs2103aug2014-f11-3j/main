//@author: a0098745l



	/**
	 * origin: .\taskbuddy\database\CommandLogger.java
	 */


package taskbuddy.database;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.LinkedList;

import taskbuddy.logic.Task;

/**
 * This class logs the commands for syncing task manipulations to Google
 * Calendar when the user goes online again. When the user goes offline, task
 * manipulations in database are not executed in Google Calendar. These task
 * manipulations are logged so that the user can sync them to Google Calendar
 * should he exit TaskBuddy.
 *
 */
public class CommandLogger {

    private static final String ERROR_NO_SUCH_COMMAND = "No such command.";
    private static final String ERROR_CANNOT_CREATE_COMMAND_LOG = "Cannot create command log file.";
    private static final String ERR_CANNOT_OPEN_LOG = "Cannot open log file.";

    private static final String DELIMITER_SPLIT = "\\|";
    private static final int NUMBER_OF_SPLIT_ELEMENTS = 2;
    private static final int POSITION_COMMAND = 0;
    private static final int POSITION_TASK = 1;
    private static final String COMMANDS = " commands:";

    SimpleDateFormat formatter = new SimpleDateFormat(
            Task.DATABASE_DATE_TIME_FORMATTER);

    File log;
    BufferedWriter writer = null;
    BufferedReader reader = null;

    /**
     * Returns the <code>File</code> object representing the log file. Used
     * primarily for <code>File</code> and <code>Path</code> manipulation.
     * 
     * @return the <code>File</code> object representing the log file
     */
    public File getLog() {
        return log;
    }

    /**
     * Prepares the command log to be read/written from/to. If the command log
     * exists, this method assumes that it came from a previous session. If the
     * command log does not exist, this method creates it and logs all commands
     * into newly created command log.
     * 
     * @param logName
     *            name of command log file
     * @return queue of commands read from existing log file, otherwise empty
     *         command queue for non-existing command log
     * @throws IOException
     *             when log file cannot be read properly
     * @throws ParseException
     *             when commands cannot be parsed from log file properly
     */
    public LinkedList<GoogleCalendarCommand> prepareCommandLog(String logName)
            throws IOException, ParseException {
        LinkedList<GoogleCalendarCommand> commandQueue = new LinkedList<GoogleCalendarCommand>();
        this.log = new File(logName);

        if (this.getLog().isFile()) {
            commandQueue = this.readCommands();
        } else {
            try {
                log.createNewFile();
            } catch (IOException e) {
                // TODO Test this
                throw new IOException(ERROR_CANNOT_CREATE_COMMAND_LOG, e);
            }
        }
        return commandQueue;
    }

    /**
     * Converts all commands in the command queue to a string for writing to
     * command log.
     * 
     * @param commandQueue
     *            commands to be written to command log
     * @return string containing all commands and details about their associated
     *         tasks
     */
    public String commandsToString(
            LinkedList<GoogleCalendarCommand> commandQueue) {
        int numberOfCommands = commandQueue.size();
        String result = Integer.toString(numberOfCommands) + COMMANDS + "\n";

        for (GoogleCalendarCommand aCommand : commandQueue) {
            result = result + aCommand.displayCommand() + "\n";
        }
        return result;
    }

    /**
     * Writes all commands in the command queue as a string into the command
     * log. The <code>prepareCommandLog</code> method must be called first
     * before calling this.
     * 
     * @param commandQueue
     *            the commands in the command queue to be written to command log
     * @throws IOException
     *             if there are write problems to the log file
     */
    public void writeToLogFile(LinkedList<GoogleCalendarCommand> commandQueue)
            throws IOException {
        Path logFilePath = this.getLog().toPath();
        try {
            writer = Files.newBufferedWriter(logFilePath,
                    StandardCharsets.UTF_8,
                    StandardOpenOption.TRUNCATE_EXISTING);
            writer.write(this.commandsToString(commandQueue));
            writer.flush();
        } finally {
            if (writer != null) {
                writer.close();
            }
        }
    }

    /**
     * Splits a command string into its command type and the task to be
     * manipulated.
     * 
     * @param commandString
     *            command string read in from command log, which is also the
     *            result of the <code>displayCommand</code> method
     * @return a string array holding the command type and task
     */
    public String[] splitCommandTask(String commandString) {
        String[] result = commandString.split(DELIMITER_SPLIT,
                NUMBER_OF_SPLIT_ELEMENTS);
        for (int i = 0; i < NUMBER_OF_SPLIT_ELEMENTS; i++) {
            result[i] = result[i].trim();
        }
        return result;
    }

    /**
     * Reads in a <code>GoogleCalendarCommand</code> object from a given command
     * string.
     * 
     * @param commandString
     *            command string read in from command log, which is also the
     *            result of the <code>displayCommand</code> method
     * @return the read in <code>GoogleCalendarCommand</code> object
     * @throws ParseException
     *             when command string is not parsed properly
     */
    public GoogleCalendarCommand readCommand(String commandString)
            throws ParseException {
        String[] splitCommandTask = this.splitCommandTask(commandString);
        String commandType = splitCommandTask[POSITION_COMMAND];
        String taskString = splitCommandTask[POSITION_TASK];
        Task task = (new TaskLogger()).readTask(taskString);

        // @formatter:off
        switch (commandType) {
            case GoogleCalendarAdd.COMMAND_TYPE :
                return new GoogleCalendarAdd(task);
            case GoogleCalendarDelete.COMMAND_TYPE :
                return new GoogleCalendarDelete(task);
            case GoogleCalendarUpdate.COMMAND_TYPE :
                return new GoogleCalendarUpdate(task);
        default :
            throw new IllegalArgumentException(ERROR_NO_SUCH_COMMAND);
        }
        // @formatter:on
    }

    /**
     * Retrieves queue of commands from command log. This method can only be
     * executed after the <code>prepareCommandLog</code> method of this class.
     * 
     * @return queue of commands from command log
     * @throws ParseException
     *             when command string is not parsed properly
     * @throws IOException
     *             when command log cannot be read properly
     */
    public LinkedList<GoogleCalendarCommand> readCommands()
            throws ParseException, IOException {
        Path logPath = this.getLog().toPath();
        // @formatter:off
        LinkedList<GoogleCalendarCommand> result = 
                new LinkedList<GoogleCalendarCommand>();
        // @formatter:on
        String aCommandString;

        try {
            reader = Files.newBufferedReader(logPath);
            reader.readLine();

            while ((aCommandString = reader.readLine()) != null) {
                GoogleCalendarCommand aCommand = this
                        .readCommand(aCommandString);
                result.add(aCommand);
            }
        } catch (IOException e) {
            throw new IOException(ERR_CANNOT_OPEN_LOG, e);
        } finally {
            if (reader != null) {
                reader.close();
            }
        }
        return result;
    }

}
	// End of segment: .\taskbuddy\database\CommandLogger.java





	/**
	 * origin: .\taskbuddy\database\Database.java
	 */


package taskbuddy.database;

import java.io.IOException;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.NoSuchElementException;

import taskbuddy.logic.Task;

/**
 *
 * Facade class for <code>DatabaseHandler</code> that stores tasks and
 * implements methods associated with adding/retrieval of tasks. This class
 * provides the API for database component. It is primarily called by logic
 * component and effectively communicates with Google Calendar manager for task
 * synchronisation with Google Calendar.
 *
 */
public class Database {
    private static Database instance = null;
    DatabaseHandler databaseHandler;

    /**
     * TODO Delete this before sending to production For debugging
     */
    public void printTasks() {
        ArrayList<Task> tasks = databaseHandler.getTasks();
        TaskLogger myTaskLogger = databaseHandler.taskLogger;
        System.out.println(myTaskLogger.tasksToString(tasks));
    }

    /**
     * @return an instance of this class.
     * @throws IOException
     *             when the same circumstances in this class' private
     *             constructor apply
     * @throws ParseException
     *             when the same circumstances in this class' private
     *             constructor apply
     */
    public static Database getInstance() throws IOException, ParseException {
        if (Database.instance == null) {
            Database.instance = new Database();
        }
        return Database.instance;
    }

    /**
     * Private constructor for this class that defeats instantiation by other
     * classes. Initialises temporary and logged memory for tasks and commands
     * through the database handler.
     * 
     * @throws IOException
     *             when log file cannot be read from, written to or created when
     *             user is offline and tasks cannot be synced to Google
     *             Calendar.
     * @throws ParseException
     *             when tasks cannot be parsed from existing log file
     */
    Database() throws IOException, ParseException {
        databaseHandler = new DatabaseHandler();
    }

    /**
     * Retrieves all stored tasks.
     * 
     * @return all tasks
     */
    public ArrayList<Task> getTasks() {
        return databaseHandler.getTasks();
    }

    /**
     * Adds task to temporary and logged list of tasks, as well as syncing to
     * Google Calendar.
     * 
     * @param task
     *            task to be added
     * @throws IOException
     *             when there are problems writing to log file
     * @throws UnknownHostException
     *             when user is offline and task cannot be synced to Google
     *             Calendar
     */
    public void addTask(Task task) throws IOException, UnknownHostException {
        databaseHandler.addTask(task);
    }

    /**
     * Searches for and returns a task based on its task ID from an empty or
     * non-empty stored list of tasks.
     * 
     * @param taskId
     *            title of task to retrieve
     * @return task whose title matches search string, null if stored list of
     *         task is empty or if no title match found.
     * @throws IllegalAccessException
     *             when this method tries to read from an empty list of tasks
     * @throws NoSuchElementException
     *             when this method cannot find a matching task to the given
     *             task ID.
     * 
     */
    public Task read(int taskId) throws IllegalAccessException,
            NoSuchElementException {
        return databaseHandler.read(taskId);
    }

    /**
     * Searches for and returns a task based on its Google Calendar ID from an
     * empty or non-empty stored list of tasks.
     * 
     * @param googleId
     *            Google Calendar ID of task to retrieve
     * @return task whose Google Calendar ID matches given Google Calendar ID,
     *         null if stored list of task is empty or if no Google Calendar ID
     *         match is found.
     * @throws IllegalAccessException
     *             when this method tries to read from an empty list of tasks
     * @throws NoSuchElementException
     *             when this method cannot find a matching task to the given
     *             Google Calendar ID.
     * 
     */
    public Task read(String googleId) throws IllegalAccessException,
            NoSuchElementException {
        return databaseHandler.read(googleId);
    }

    /**
     * Deletes a task from temporary and logged memory, as well as Google
     * Calendar, based on its task ID from an empty or non-empty stored list of
     * tasks.
     *
     * @param taskId
     *            task ID of task to be deleted
     * @throws IllegalAccessException
     *             when list of tasks is empty and there is no task for this
     *             method to delete
     * @throws NoSuchElementException
     *             when no matching task to given task ID is found
     * @throws IOException
     *             when there are problems writing to log file
     */
    public void delete(int taskId) throws IllegalAccessException,
            NoSuchElementException, IOException {
        databaseHandler.delete(taskId);
    }

    /**
     * Searches for and returns a list of tasks whose descriptions and/or titles
     * match the search string.
     *
     * @param searchString
     *            search string
     * @return task whose title and/or description matches search string; empty
     *         list if no matches found
     * @throws IllegalArgumentException
     *             when search string is empty
     * @throws IllegalAccessException
     *             when task list is empty and there is nothing to search for
     */
    public ArrayList<Task> search(String searchString)
            throws IllegalArgumentException, IllegalAccessException {
        return databaseHandler.search(searchString);
    }

    /**
     * Edits a task with task ID of argument <code>newTask</code> by replacing
     * the old task with the new task from the argument of this method.
     * 
     * @param newTask
     *            new task, which has the same task ID as that of old task, to
     *            replace old task
     * @throws IllegalAccessException
     *             when there are no tasks stored currently and hence there is
     *             no task to edit
     * @throws NoSuchElementException
     *             when this method cannot find a matching task to task ID in
     *             the given task argument.
     * @throws IOException
     *             when there are problems writing to log file
     * 
     */
    public void edit(Task newTask) throws IllegalAccessException,
            NoSuchElementException, IOException {
        databaseHandler.edit(newTask);
    }

    /**
     * Adds observer to observe changes to tasks stored in this class.
     * 
     * @param databaseObserver
     *            observer subscribing for tasks updates in this class
     */
    public void addObserver(DatabaseObserver databaseObserver) {
        databaseHandler.addObserver(databaseObserver);
    }

    /**
     * Synchronises tasks between database and Google Calendar. This achieved by
     * first executing the forward sync, followed by the backward sync. Forward
     * sync entails synchronising task manipulations done in database but not
     * Google Calendar when the user was previously offline. Backward sync is
     * the reverse, that is synchronising task manipulations done in Google
     * Calendar but not database when the user was previously offline.
     * 
     * @throws IOException
     *             when command log cannot be written to
     */
    public void sync() throws IOException {
        databaseHandler.forwardSync();
        databaseHandler.googleCal.executeBackwardSync();
    }

    /**
     * Adds a task to database like the <code>addTask</code> method, except
     * without adding the this task to Google Calendar. This method is used when
     * Google Calendar manager needs to add a task to database to synchronise
     * tasks between Google Calendar manager and database, which is also known
     * as backward sync.
     * 
     * @param task
     *            task to be added
     * @throws IOException
     *             when there are problems writing to log file
     */
    public void addBackwardSync(Task task) throws IOException {
        databaseHandler.addBackwardSync(task);
    }

    /**
     * Deletes a task from database like the <code>delete</code> method, except
     * without deleting this task from Google Calendar. This method is the
     * delete variant of the <code>addBackwardSync</code> method.
     *
     * @param googleId
     *            Google Calendar ID of task to be deleted
     * @throws IllegalAccessException
     *             when list of tasks is empty and there is no task for this
     *             method to delete
     * @throws NoSuchElementException
     *             when no matching task to given Google Calendar ID is found
     * @throws IOException
     *             when there are problems writing to log file
     */
    public void deleteBackwardSync(String googleId)
            throws IllegalAccessException, NoSuchElementException, IOException {
        databaseHandler.deleteBackwardSync(googleId);
    }

    /**
     * Edits a task from database like the <code>edit</code> method, except
     * without updating this task to Google Calendar. This method is the edit
     * variant of the <code>addBackwardSync</code> method.
     * 
     * @param googleIdToEdit
     *            Google Calendar ID of task to edit
     * @param newTask
     *            new task to replace task to be edited
     */
    public void editBackwardSync(String googleIdToEdit, Task newTask)
            throws IllegalAccessException, NoSuchElementException, IOException {
        // TODO Auto-generated method stub
        databaseHandler.editBackwardSync(googleIdToEdit, newTask);

    }

}
	// End of segment: .\taskbuddy\database\Database.java





	/**
	 * origin: .\taskbuddy\database\DatabaseHandler.java
	 */


package taskbuddy.database;

import java.io.IOException;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.NoSuchElementException;

import taskbuddy.googlecal.GoogleCalendarManager;
import taskbuddy.logic.Task;

public class DatabaseHandler {
    static final String TASK_LOG_NAME = "log";
    static final String COMMAND_LOG_NAME = "commandLog";
    static final String EMPTY_STRING = "";

    // @formatter:off
    static final String ERR_NOT_SYNCED_GOOGLE_CALENDAR = 
            "Changes made to database and task log but not Google Calendar. ";
    static final String ERR_NO_TASKS = 
            "Cannot read from empty list of tasks.";
    static final String ERR_NO_SUCH_TASK_ID = 
            "No such task ID";
    static final String ERR_NO_SUCH_GOOGLE_ID = 
            "No such Google Calendar ID";
    static final String ERR_MSG_SEARCH_STRING_EMPTY = 
            "Search string cannot be empty.";
    // @formatter:on

    TaskLogger taskLogger;
    CommandLogger commandLogger;
    ArrayList<Task> tasks;
    GoogleCalendarManager googleCal;
    LinkedList<GoogleCalendarCommand> commandQueue;
    ArrayList<DatabaseObserver> observerList;

    /**
     * Constructor for this class. Initialises temporary and logged memory for
     * tasks and commands.
     * 
     * @throws IOException
     *             when log file cannot be read from, written to or created
     * @throws ParseException
     *             when tasks cannot be parsed from existing log file
     */
    DatabaseHandler() throws IOException, ParseException {
        this.taskLogger = new TaskLogger();
        this.commandLogger = new CommandLogger();
        this.tasks = taskLogger.prepareTaskLog(TASK_LOG_NAME);
        this.commandQueue = commandLogger.prepareCommandLog(COMMAND_LOG_NAME);
        this.googleCal = new GoogleCalendarManager();
        GoogleCalendarCommand.googleCal = this.googleCal;
        this.commandQueue = new LinkedList<GoogleCalendarCommand>();
        this.observerList = new ArrayList<DatabaseObserver>();
    }

    /**
     * Retrieves all stored tasks.
     * 
     * @return all tasks stored temporarily in this class
     */
    ArrayList<Task> getTasks() {
        return this.tasks;
    }

    /**
     * Retrieves command queue for Google Calendar commands.
     * 
     * @return command queue for Google Calendar commands
     */
    public LinkedList<GoogleCalendarCommand> getCommandQueue() {
        return commandQueue;
    }

    /**
     * Set task IDs in order of their arraylist indices. This method is called
     * whenever a task manipulation affects the arraylist index of a task, thus
     * making task ID allocation dynamic.
     */
    void setTaskIds() {
        for (Task aTask : this.getTasks()) {
            int taskId = this.getTasks().indexOf(aTask) + 1;
            aTask.setTaskId(taskId);
        }
    }

    /**
     * Adds task to temporary and logged list of tasks, as well as syncing to
     * Google Calendar.
     * 
     * @param task
     *            task to be added
     * @throws IOException
     *             when there are problems writing to log file
     * @throws UnknownHostException
     *             when user is offline and task cannot be synced to Google
     *             Calendar
     */
    void addTask(Task task) throws IOException, UnknownHostException {
        this.tasks.add(task);
        try {
            googleCal.add(task);
        } catch (UnknownHostException e) {
            // TODO Add add command to command queue
            assert GoogleCalendarCommand.googleCal != null;
            this.commandQueue.add(new GoogleCalendarAdd(task));
            commandLogger.writeToLogFile(this.getCommandQueue());
            throw new UnknownHostException(ERR_NOT_SYNCED_GOOGLE_CALENDAR
                    + e.getMessage());
        } finally {
            followUpOnTaskUpdate();
        }
    }

    /**
     * Finds the task whose task ID matches a given task ID
     * 
     * @param taskId
     *            task ID to search
     * @return task with matching task ID
     */
    Task findMatchingTask(int taskId) {
        Task result = null;
        for (Task aTask : this.getTasks()) {
            if (aTask.getTaskId() == taskId) {
                result = aTask;
            }
        }
        return result;
    }

    /**
     * Finds the task whose Google Calendar ID matches a given task Google
     * Calendar ID.
     * 
     * @param googleId
     *            Google Calendar ID to search
     * @return task with matching Google Calendar ID
     */
    public Task findMatchingTask(String googleId) {
        Task result = null;
        for (Task aTask : this.getTasks()) {
            if (aTask.getGID().equals(googleId)) {
                result = aTask;
            }
        }
        return result;
    }

    /**
     * Searches for and returns a task based on its task ID from an empty or
     * non-empty stored list of tasks.
     * 
     * @param taskId
     *            title of task to retrieve
     * @return task whose task ID matches given task ID, null if stored list of
     *         task is empty or if no task ID match is found.
     * @throws IllegalAccessException
     *             when this method tries to read from an empty list of tasks
     * @throws NoSuchElementException
     *             when this method cannot find a matching task to the given
     *             task ID.
     * 
     */
    Task read(int taskId) throws IllegalAccessException, NoSuchElementException {
        if (this.getTasks().isEmpty()) {
            throw new IllegalAccessException(ERR_NO_TASKS);
        }

        assert !this.getTasks().isEmpty();
        Task result = findMatchingTask(taskId);
        if (result == null) {
            throw new NoSuchElementException(ERR_NO_SUCH_TASK_ID);
        }

        assert result != null;
        return result;
    }

    /**
     * Searches for and returns a task based on its Google Calendar ID from an
     * empty or non-empty stored list of tasks.
     * 
     * @param googleId
     *            Google Calendar ID of task to retrieve
     * @return task whose Google Calendar ID matches given Google Calendar ID,
     *         null if stored list of task is empty or if no Google Calendar ID
     *         match is found.
     * @throws IllegalAccessException
     *             when this method tries to read from an empty list of tasks
     * @throws NoSuchElementException
     *             when this method cannot find a matching task to the given
     *             Google Calendar ID.
     * 
     */
    Task read(String googleId) throws IllegalAccessException,
            NoSuchElementException {
        if (this.getTasks().isEmpty()) {
            throw new IllegalAccessException(ERR_NO_TASKS);
        }

        assert !this.getTasks().isEmpty();
        Task result = findMatchingTask(googleId);
        if (result == null) {
            throw new NoSuchElementException(ERR_NO_SUCH_GOOGLE_ID);
        }

        // If result is null, it means the above exception was not thrown.
        assert result != null;
        return result;
    }

    /**
     * Deletes a task from temporary and logged memory, as well as Google
     * Calendar, based on its task ID from an empty or non-empty stored list of
     * tasks.
     *
     * @param taskId
     *            task ID of task to be deleted
     * @throws IllegalAccessException
     *             when list of tasks is empty and there is no task for this
     *             method to delete
     * @throws NoSuchElementException
     *             when no matching task to given task ID is found
     * @throws IOException
     *             when there are problems writing to log file
     */
    void delete(int taskId) throws IllegalAccessException,
            NoSuchElementException, IOException {
        Task taskToDelete = this.read(taskId);
        String gCalIdToDelete = taskToDelete.getGID();

        assert !this.getTasks().isEmpty() && taskToDelete != null;
        this.tasks.remove(taskToDelete);
        try {
            googleCal.delete(gCalIdToDelete);
        } catch (UnknownHostException e) {
            // TODO Add delete command to command queue
            assert GoogleCalendarCommand.googleCal != null;
            this.commandQueue.add(new GoogleCalendarDelete(taskToDelete));
            commandLogger.writeToLogFile(this.getCommandQueue());
            throw new UnknownHostException(ERR_NOT_SYNCED_GOOGLE_CALENDAR
                    + e.getMessage());
        } finally {
            followUpOnTaskUpdate();
        }
    }

    /**
     * Checks if a string contains a given sub-string
     * 
     * @param container
     *            larger string that contains the given sub-string
     * @param contained
     *            sub-string
     * @return true if larger string contains given sub-string, false otherwise
     */
    boolean containsIgnoreCase(String container, String contained) {
        String containerLower = container.toLowerCase();
        String containedLower = contained.toLowerCase();

        return containerLower.contains(containedLower);
    }

    /**
     * Searches for and returns a list of tasks whose descriptions and/or titles
     * match the search string.
     *
     * @param searchString
     *            search string
     * @return task whose title and/or description matches search string; empty
     *         list if no matches found
     * @throws IllegalArgumentException
     *             when search string is empty
     * @throws IllegalAccessException
     *             when task list is empty and there is nothing to search for
     */
    ArrayList<Task> search(String searchString)
            throws IllegalArgumentException, IllegalAccessException {
        if (searchString.equals(EMPTY_STRING)) {
            throw new IllegalArgumentException(ERR_MSG_SEARCH_STRING_EMPTY);
        }
        if (this.getTasks().isEmpty()) {
            throw new IllegalAccessException(ERR_NO_TASKS);
        }

        assert !searchString.equals(EMPTY_STRING) && !this.getTasks().isEmpty();
        ArrayList<Task> results = new ArrayList<Task>();
        for (Task aTask : this.getTasks()) {
            if (this.containsIgnoreCase(aTask.getTitle(), searchString)
                    || this.containsIgnoreCase(aTask.getDescription(),
                            searchString)) {
                results.add(aTask);
            }
        }

        return results;
    }

    /**
     * Similar to <code>search</code> method but searches only in the title
     * fields of tasks.
     *
     * @param searchString
     *            search string
     * @return list of tasks whose titles contain search string; empty list if
     *         no title matches found
     */
    ArrayList<Task> searchTitle(String searchString) {
        ArrayList<Task> results = new ArrayList<Task>();
        for (Task aTask : this.getTasks()) {
            if (aTask.getTitle().contains(searchString)) {
                results.add(aTask);
            }
        }
        return results;
    }

    /**
     * Similar to <code>search</code> method but searches only in the
     * description fields of tasks.
     *
     * @param searchString
     *            search string
     * @return list of tasks whose descriptions contain search string; empty
     *         list if no description matches found
     */
    ArrayList<Task> searchDescription(String searchString) {
        ArrayList<Task> results = new ArrayList<Task>();
        for (Task aTask : this.getTasks()) {
            if (aTask.getDescription().contains(searchString)) {
                results.add(aTask);
            }
        }
        return results;
    }

    /**
     * Replaces task to edit with this new task, based on the assumption that
     * this new task has the same task ID set as the task to edit and replace.
     * 
     * @param newTask
     *            New task to replace task to edit
     * @throws IllegalAccessException
     *             when there are no tasks stored currently and hence there is
     *             no task to edit
     */
    public void replaceTaskToEdit(Task newTask) throws IllegalAccessException {
        int taskIdToEdit = newTask.getTaskId();
        Task oldTask = this.read(taskIdToEdit);
        int oldTaskIndex = this.getTasks().indexOf(oldTask);
        this.getTasks().set(oldTaskIndex, newTask);
    }

    /**
     * Executes follow up actions when attempt to update Google Calendar about
     * task edit fails, such as adding the update command to the command queue
     * and adding information to the exception message thrown by Google Calendar
     * Manager during the update failure.
     * 
     * @param newTask
     *            new task to replace task to edit
     * @param e
     *            exception thrown by Google Calendar manager when user is
     *            offline
     * @throws IOException
     *             when command Log cannot be written to
     */
    public void followUpGoogleCalendarUpdateFailure(Task newTask,
            UnknownHostException e) throws IOException {
        assert GoogleCalendarCommand.googleCal != null;
        this.commandQueue.add(new GoogleCalendarUpdate(newTask));
        commandLogger.writeToLogFile(this.getCommandQueue());
        throw new UnknownHostException(ERR_NOT_SYNCED_GOOGLE_CALENDAR
                + e.getMessage());
    }

    /**
     * Executes actions to follow up after task to edit has been replaced by new
     * task in <code>replaceTaskToEdit</code> method, such as re-setting task
     * IDs, writing tasks to the task log and notifying observers of this
     * object.
     * 
     * @throws IOException
     *             when there are problems writing to log file
     */
    public void followUpOnTaskUpdate() throws IOException {
        this.setTaskIds();
        this.taskLogger.writeToLogFile(this.getTasks());
        this.notifyObservers();
    }

    /**
     * Edits a task with task ID of argument <code>newTask</code> by replacing
     * the old task with the new task from the argument of this method.
     * 
     * @param newTask
     *            new task, which has the same task ID as that of old task, to
     *            replace old task
     * @throws IllegalAccessException
     *             when there are no tasks stored currently and hence there is
     *             no task to edit
     * @throws NoSuchElementException
     *             when this method cannot find a matching task to task ID in
     *             the given task argument.
     * @throws IOException
     *             when there are problems writing to log file
     * 
     */
    void edit(Task newTask) throws IllegalAccessException,
            NoSuchElementException, IOException {
        replaceTaskToEdit(newTask);
        try {
            googleCal.update(newTask);
        } catch (UnknownHostException e) {
            followUpGoogleCalendarUpdateFailure(newTask, e);
        } finally {
            followUpOnTaskUpdate();
        }

    }

    /**
     * Adds observer to observe changes to tasks stored in this class.
     * 
     * @param databaseObserver
     *            observer subscribing for tasks updates in this class
     */
    void addObserver(DatabaseObserver databaseObserver) {
        this.observerList.add(databaseObserver);
    }

    /**
     * Notify observers of updates to tasks stored in this class
     */
    void notifyObservers() {
        for (DatabaseObserver anObserver : observerList) {
            anObserver.update();
        }
    }

    /**
     * Synchronises tasks that are manipulated in database but not in Google
     * Calendar when user is offline forward to Google Calendar Manager. This is
     * achieved by executing the commands in the command queue. The reversed
     * synchronisation from Google Calendar to database is called backward
     * synchronisation.
     * 
     * @throws IOException
     *             when command log cannot be written to
     */
    void forwardSync() throws IOException {
        while (!this.getCommandQueue().isEmpty()) {
            GoogleCalendarCommand nextCommand = this.getCommandQueue().peek();
            nextCommand.execute();
            // If execution is unsuccessful due to user still being offline, the
            // following code will not be executed and the command that has just
            // failed to be executed will remain in the command queue.
            this.getCommandQueue().remove();
            commandLogger.writeToLogFile(this.getCommandQueue());
        }
    }

    /**
     * Adds a task to database like the <code>addTask</code> method, except
     * without synchronisation to Google Calendar. This method is used when
     * Google Calendar manager needs to add a task to database to synchronise
     * tasks between Google Calendar manager and database, which is also known
     * as backward sync.
     * 
     * @param task
     *            task to be added
     * @throws IOException
     *             when there are problems writing to log file
     */
    public void addBackwardSync(Task task) throws IOException {
        this.tasks.add(task);
        followUpOnTaskUpdate();
    }

    /**
     * Deletes a task from database like the <code>delete</code> method, except
     * without deleting this task from Google Calendar. This method is the
     * delete variant of the <code>addBackwardSync</code> method.
     *
     * @param googleId
     *            Google Calendar ID of task to be deleted
     * @throws IllegalAccessException
     *             when list of tasks is empty and there is no task for this
     *             method to delete
     * @throws NoSuchElementException
     *             when no matching task to given Google Calendar ID is found
     * @throws IOException
     *             when there are problems writing to log file
     */
    public void deleteBackwardSync(String googleId)
            throws IllegalAccessException, NoSuchElementException, IOException {
        Task taskToDelete = this.read(googleId);
        assert !this.getTasks().isEmpty() && taskToDelete != null;

        this.tasks.remove(taskToDelete);
        followUpOnTaskUpdate();

    }

    /**
     * Replaces task to edit with this new task, where the task to edit is
     * specified by a given Google Calendar ID.
     * 
     * @param googleIdToEdit
     *            Google Calendar ID of task to edit and replace.
     * @param newTask
     *            New task to replace task to edit
     * @throws IllegalAccessException
     *             when there are no tasks stored currently and hence there is
     *             no task to edit
     */
    public void replaceTaskToEdit(String googleIdToEdit, Task newTask)
            throws IllegalAccessException {
        Task oldTask = this.read(googleIdToEdit);
        int oldTaskIndex = this.tasks.indexOf(oldTask);
        this.tasks.set(oldTaskIndex, newTask);
    }

    /**
     * Edits a task from database like the <code>edit</code> method, except
     * without updating this task to Google Calendar. This method is the edit
     * variant of the <code>addBackwardSync</code> method.
     * 
     * @param googleIdToEdit
     *            Google Calendar ID of task to edit
     * @param newTask
     *            new task to replace task to be edited
     */
    public void editBackwardSync(String googleIdToEdit, Task newTask)
            throws IllegalAccessException, NoSuchElementException, IOException {
        replaceTaskToEdit(googleIdToEdit, newTask);
        followUpOnTaskUpdate();
    }

}

	// End of segment: .\taskbuddy\database\DatabaseHandler.java





	/**
	 * origin: .\taskbuddy\database\DatabaseObserver.java
	 */


package taskbuddy.database;

/**
 * Interface that observes tasks stored in a <code>Database</code> object.
 * 
 */
public interface DatabaseObserver {
    /**
     * Gets updates on tasks by pulling data from a <code>Database</code>
     * object.
     */
    void update();
}

	// End of segment: .\taskbuddy\database\DatabaseObserver.java





	/**
	 * origin: .\taskbuddy\database\DatabaseObserverStub.java
	 */


package taskbuddy.database;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;

import taskbuddy.logic.Task;

/**
 * Stub that observes tasks stored in a <code>Database</code> object.
 * 
 */
public class DatabaseObserverStub implements DatabaseObserver {
    Database database;
    ArrayList<Task> observedTasks;

    /**
     * Constructor that takes in and specifies the database to be observed for
     * this class
     * 
     * @param database
     *            database to be observed
     * @throws IOException
     *             when task log cannot be read from, written to or created when
     *             constructing database
     * @throws ParseException
     *             when tasks cannot be parsed from existing log file when
     *             constructing database
     */
    public DatabaseObserverStub(Database database) throws IOException,
            ParseException {
        observedTasks = new ArrayList<Task>();
        this.database = database;
        database.addObserver(this);
    }

    @Override
    public void update() {
        observedTasks = database.getTasks();
    }

    /**
     * @return list of tasks in this class that gets updates from
     *         <code>Database</code>'s tasks
     */
    public ArrayList<Task> getObservedTasks() {
        return observedTasks;
    }

}

	// End of segment: .\taskbuddy\database\DatabaseObserverStub.java





	/**
	 * origin: .\taskbuddy\database\GoogleCalendarAdd.java
	 */


package taskbuddy.database;

import java.net.UnknownHostException;

import taskbuddy.logic.Task;

/**
 * This class is used by <code>Database</code> to store an "add task" command to
 * Google Calendar when the user is offline.
 * 
 */
public class GoogleCalendarAdd extends GoogleCalendarCommand {
    static final String COMMAND_TYPE = "Add";
    static final String DELIMITER = " | ";

    public GoogleCalendarAdd(Task task) {
        super(task);
    }

    @Override
    public void execute() throws UnknownHostException {
        try {
            googleCal.add(task);
        } catch (UnknownHostException e) {
            throw new UnknownHostException(ERR_NOT_SYNCED_GOOGLE_CALENDAR);
        }
    }

    @Override
    public String displayCommand() {
        return COMMAND_TYPE + DELIMITER + this.getTask().displayTask();
    }

}

	// End of segment: .\taskbuddy\database\GoogleCalendarAdd.java





	/**
	 * origin: .\taskbuddy\database\GoogleCalendarCommand.java
	 */


package taskbuddy.database;

import java.net.UnknownHostException;

import taskbuddy.googlecal.GoogleCalendarManager;
import taskbuddy.logic.Task;

/**
 * Represents a command to be executed by Google Calendar. Commands are stored
 * in a queue in <code>Database</code> when the user is offline and syncing to
 * Google Calendar is impossible. This class implements the command pattern.
 * 
 */
abstract class GoogleCalendarCommand {
    // @formatter:off
    static final String ERR_NOT_SYNCED_GOOGLE_CALENDAR = 
            "Cannot synchronise tasks to Google Calendar.";
    // @formatter:on
    static GoogleCalendarManager googleCal;
    Task task;

    /**
     * Constructor for this class, which initialises the task to be manipulated
     * by the command, and the associated Google Calendar manager. For example,
     * the task field of an add command is the task to be added to Google
     * Calendar.
     * 
     * @param task
     *            task to be manipulated by the command
     */
    public GoogleCalendarCommand(Task task) {
        this.task = task;
    }

    /**
     * Retrieves and returns the task to be manipulated by the command.
     * 
     * @return the task to be manipulated by the command
     */
    public Task getTask() {
        return task;
    }

    /**
     * Executes the command, where the execution behaviour depends on the type
     * of subclass, that is an add command's execution will be different from a
     * delete command's execution/
     * 
     * @throws UnknownHostException
     *             when user is offline
     */
    public abstract void execute() throws UnknownHostException;

    /**
     * String-ifies this command for writing out to the command log.
     * 
     * @return a string holding the command type as well as all details of the
     *         task to be manipulated by this command
     */
    public abstract String displayCommand();

}
	// End of segment: .\taskbuddy\database\GoogleCalendarCommand.java





	/**
	 * origin: .\taskbuddy\database\GoogleCalendarDelete.java
	 */


package taskbuddy.database;

import java.net.UnknownHostException;

import taskbuddy.logic.Task;

/**
 * This class is the delete variant of the <code>GoogleCalendarAdd</code> class.
 * 
 */
public class GoogleCalendarDelete extends GoogleCalendarCommand {
    static final String COMMAND_TYPE = "Delete";
    static final String DELIMITER = " | ";

    public GoogleCalendarDelete(Task task) {
        super(task);
    }

    @Override
    public void execute() throws UnknownHostException {
        try {
            googleCal.delete(task.getGID());
        } catch (UnknownHostException e) {
            throw new UnknownHostException(ERR_NOT_SYNCED_GOOGLE_CALENDAR);
        }
    }

    @Override
    public String displayCommand() {
        return COMMAND_TYPE + DELIMITER + this.getTask().displayTask();
    }
}

	// End of segment: .\taskbuddy\database\GoogleCalendarDelete.java





	/**
	 * origin: .\taskbuddy\database\GoogleCalendarManagerStub.java
	 */


package taskbuddy.database;

import java.net.UnknownHostException;

import taskbuddy.googlecal.GoogleCalendarManager;
import taskbuddy.logic.Task;

/**
 * This class is a stub for the GoogleCalendarManager class, for dependency
 * injection in testing the Database class
 * 
 */
public class GoogleCalendarManagerStub extends GoogleCalendarManager {
    // These flags will turn true if add, delete and update methods are
    // executed.
    public String googleCalendarId = "11111";

    public void add(Task task) throws UnknownHostException {
        task.setGID(googleCalendarId);
    }

    public void delete(String eventId) throws UnknownHostException {
    }

    public void update(Task newTask) throws UnknownHostException {
    }
}

	// End of segment: .\taskbuddy\database\GoogleCalendarManagerStub.java





	/**
	 * origin: .\taskbuddy\database\GoogleCalendarUpdate.java
	 */


package taskbuddy.database;

import java.net.UnknownHostException;

import taskbuddy.logic.Task;

/**
 * This class is the update variant of the <code>GoogleCalendarAdd</code> class.
 * 
 */
public class GoogleCalendarUpdate extends GoogleCalendarCommand {
    static final String DELIMITER = " | ";
    static final String COMMAND_TYPE = "Update";
    
    
    public GoogleCalendarUpdate(Task task) {
        super(task);
    }

    @Override
    public void execute() throws UnknownHostException {
        try {
            googleCal.update(task);
        } catch (UnknownHostException e) {
            throw new UnknownHostException(ERR_NOT_SYNCED_GOOGLE_CALENDAR);
        }
    }

    @Override
    public String displayCommand() {
        return COMMAND_TYPE + DELIMITER + this.getTask().displayTask();
    }
}

	// End of segment: .\taskbuddy\database\GoogleCalendarUpdate.java





	/**
	 * origin: .\taskbuddy\database\OfflineGoogleCalendarManagerStub.java
	 */


package taskbuddy.database;

import java.net.UnknownHostException;

import taskbuddy.googlecal.GoogleCalendarManager;
import taskbuddy.logic.Task;

/**
 * This class is a stub for the offline <code>GoogleCalendarManager</code>
 * class, for dependency injection into <code>Database</code> class to test its
 * exception handling when user is offline.
 * 
 */
public class OfflineGoogleCalendarManagerStub extends GoogleCalendarManager {
    static final String ERROR_USER_OFFLINE = "User is offline";

    public void add(Task task) throws UnknownHostException {
        throw new UnknownHostException(ERROR_USER_OFFLINE);
    }

    public void delete(String eventId) throws UnknownHostException {
        throw new UnknownHostException(ERROR_USER_OFFLINE);
    }

    public void update(Task newTask) throws UnknownHostException {
        throw new UnknownHostException(ERROR_USER_OFFLINE);
    }
}

	// End of segment: .\taskbuddy\database\OfflineGoogleCalendarManagerStub.java





	/**
	 * origin: .\taskbuddy\database\TaskLogger.java
	 */


package taskbuddy.database;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;

import taskbuddy.logic.Task;

public class TaskLogger {

    private static final String ERROR_CANNOT_PARSE = "Cannot parse task";
    private static final String ERROR_CANNOT_OPEN_LOG = "Cannot open log file.";

    // @formatter:off
    private static final String TASK_ID             = "Task ID: ";
    private static final String TITLE               = "Title: ";
    private static final String DESCRIPTION         = "Description: ";
    private static final String START               = "Start: ";
    private static final String END                 = "End: ";
    private static final String PRIORITY            = "Priority: ";
    private static final String IS_COMPLETE         = "Completed: ";
    private static final String IS_FLOATING         = "Floating task: ";
    private static final String GOOGLE_CALENDAR_ID  = "Google Calendar ID: ";

    private static final String EMPTY_STRING        = "";
    private static final String DELIMITER_SPLIT     = "\\|";
    
    private static final int NUMBER_OF_FIELDS       = 9;
    private static final int POSITION_TASK_ID       = 0;
    private static final int POSITION_TITLE         = 1;
    private static final int POSITION_DESCRIPTION   = 2;
    private static final int POSITION_START         = 3;
    private static final int POSITION_END           = 4;
    private static final int POSITION_PRIORITY      = 5;
    private static final int POSITION_IS_COMPLETE   = 6;
    private static final int POSITION_IS_FLOATING   = 7;
    private static final int POSITION_GOOGLE_ID     = 8;
    // @formatter:on

    private static final String TASKS = " tasks:";
    
    SimpleDateFormat formatter = new SimpleDateFormat(
            Task.DATABASE_DATE_TIME_FORMATTER);

    File log;
    BufferedWriter writer = null;
    BufferedReader reader = null;

    /**
     * Returns the <code>File</code> object representing the log file. Used
     * primarily for <code>File</code> and <code>Path</code> manipulation.
     * 
     * @return the <code>File</code> object representing the log file
     */
    public File getLog() {
        return log;
    }

    /**
     * Prepares the task log to be read/written from/to. If the task log exists,
     * this method assumes that it came from a previous session. Thus to use an
     * existing task log, the text in the it must be properly formatted. If the
     * task log does not exist, this method creates it and logs all tasks into
     * newly created task log.
     * 
     * @param logName
     *            name of task log file
     * @return list of tasks read from existing task log, otherwise empty list
     *         of tasks for non-existing task log
     * @throws IOException
     *             when task log cannot be read properly
     * @throws ParseException
     *             when tasks cannot be parsed from task log properly
     */
    public ArrayList<Task> prepareTaskLog(String logName) throws IOException,
            ParseException {
        ArrayList<Task> tasks = new ArrayList<Task>();
        this.log = new File(logName);

        if (this.getLog().isFile()) {
            tasks = this.readTasks();
        } else {
            try {
                log.createNewFile();
            } catch (IOException e) {
                // TODO Test this
                throw new IOException("Cannot create log file.", e);
            }
        }
        return tasks;
    }

    /**
     * Converts list of tasks to a string for writing to task log.
     * 
     * @param tasks
     *            list of tasks to be converted to string
     * @return string containing all tasks and associated information
     */
    public String tasksToString(ArrayList<Task> tasks) {
        int numberOfTasks = tasks.size();
        String result = Integer.toString(numberOfTasks) + TASKS + "\n";

        for (Task aTask : tasks) {
            result = result + aTask.displayTask() + "\n";
        }
        return result;
    }

    /**
     * Writes all existing tasks represented as a <code>String</code> into the
     * task log. The <code>prepareLog</code> method must be called first before
     * calling this.
     * 
     * @param tasks
     *            all tasks to be written to the task log
     * @throws IOException
     *             if there are write problems to the log file
     */
    public void writeToLogFile(ArrayList<Task> tasks) throws IOException {
        Path logFilePath = this.getLog().toPath();
        try {
            writer = Files.newBufferedWriter(logFilePath,
                    StandardCharsets.UTF_8,
                    StandardOpenOption.TRUNCATE_EXISTING);
            writer.write(this.tasksToString(tasks));
            writer.flush();
        } finally {
            if (writer != null) {
                writer.close();
            }
        }
    }

    /**
     * Splits a task string, that is a string representing all the information
     * of a task, into a string array holding separate fields of the task.
     * 
     * @param taskString
     *            string holding all information of a task
     * @return a string array holding separate fields of the task
     */
    public String[] splitToFields(String taskString) {
        String[] splitFields = taskString.split(DELIMITER_SPLIT,
                NUMBER_OF_FIELDS);
        for (int i = 0; i < NUMBER_OF_FIELDS; i++) {
            splitFields[i] = splitFields[i].trim();
        }
        return splitFields;
    }

    /**
     * Extracts the task ID out of the task ID field split by
     * <code>splitToField</code> method.
     * 
     * @param displayTaskId
     *            task ID field split by <code>splitToField</code> method, which
     *            is also equivalent to the <code>Task</code> class'
     *            <code>displayTaskId</code> method
     * @return task ID
     */
    public int extractTaskId(String displayTaskId) {
        String taskIdString = displayTaskId.replace(TASK_ID, EMPTY_STRING);
        return Integer.parseInt(taskIdString);
    }

    /**
     * Similar to <code>extractTaskId</code> method, except that task title is
     * extracted here.
     * 
     * @param displayTitle
     *            description field split by <code>splitToField</code> method
     * @return title of this task
     */
    public String extractTitle(String displayTitle) {
        return displayTitle.replace(TITLE, EMPTY_STRING);
    }

    /**
     * Similar to <code>extractTitle</code> method, except that task description
     * is extracted here.
     * 
     * @param displayDescription
     *            description field split by <code>splitToField</code> method
     * @return description of this task
     */
    public String extractDescription(String displayDescription) {
        return displayDescription.replace(DESCRIPTION, EMPTY_STRING);
    }

    /**
     * Similar to <code>extractTitle</code> method, except that task's start
     * time is extracted here.
     * 
     * @param displayStart
     *            start time field split by <code>splitToField</code> method
     * @return start time of this task
     */
    public Calendar extractStart(String displayStart) throws ParseException {
        String startString = displayStart.replace(START, EMPTY_STRING);

        Calendar cal = Calendar.getInstance();
        cal.setTime(formatter.parse(startString));
        return cal;
    }

    /**
     * Similar to <code>extractStart</code> method, except that task's end time
     * is extracted here.
     * 
     * @param displayEnd
     *            end time field split by <code>splitToField</code> method
     * @return end time of this task
     */
    public Calendar extractEnd(String displayEnd) throws ParseException {
        String endString = displayEnd.replace(END, EMPTY_STRING);

        Calendar cal = Calendar.getInstance();
        cal.setTime(formatter.parse(endString));
        return cal;
    }

    /**
     * Similar to <code>extractTitle</code> method, except that task's priority
     * rank is extracted here
     * 
     * @param displayPriority
     *            priority field split by <code>splitToField</code> method
     * @return priority rank of this task
     */
    public int extractPriority(String displayPriority) {
        String priorityString = displayPriority.replace(PRIORITY, EMPTY_STRING);
        return Integer.parseInt(priorityString);
    }

    /**
     * Similar to <code>extractTitle</code> method, except that task completion
     * status is extracted here.
     * 
     * @param displayIsComplete
     *            isComplete field split by <code>splitToField</code> method
     * @return true if task is completed, false otherwise
     */
    public boolean extractIsComplete(String displayIsComplete) {
        String isCompleteString = displayIsComplete.replace(IS_COMPLETE,
                EMPTY_STRING);
        return Boolean.parseBoolean(isCompleteString);
    }

    /**
     * Similar to <code>extractIsComplete</code> method, except that task
     * floating status is extracted here.
     * 
     * @param displayIsFloating
     *            isFloating field split by <code>splitToField</code> method
     * @return true for a floating task, false otherwise
     */
    public boolean extractIsFloating(String displayIsFloating) {
        String isFloatingString = displayIsFloating.replace(IS_FLOATING,
                EMPTY_STRING);
        return Boolean.parseBoolean(isFloatingString);
    }

    /**
     * Similar to <code>extractTitle</code> method, except that task's Google
     * Calendar ID is extracted here.
     * 
     * @param displayGoogleId
     *            google ID field split by <code>splitToField</code> method
     * @return task's Google Calendar ID
     */
    public String extractGoogleId(String displayGoogleId) {
        return displayGoogleId.replace(GOOGLE_CALENDAR_ID, EMPTY_STRING);
    }

    /**
     * Converts a string representing all information of a task to a
     * <code>Task</code> object.
     * 
     * @param taskString
     *            string representing all information of a task
     * @return this task as a <code>Task</code> object
     * @throws ParseException
     *             when task string is not parsed properly
     */
    public Task readTask(String taskString) throws ParseException {
        Task result = new Task();
        try {
            String[] splitFields = this.splitToFields(taskString);

            result.setTaskId(this.extractTaskId(splitFields[POSITION_TASK_ID]));
            result.setTitle(this.extractTitle(splitFields[POSITION_TITLE]));
            result.setDescription(this
                    .extractDescription(splitFields[POSITION_DESCRIPTION]));
            result.setStartTime(this.extractStart(splitFields[POSITION_START]));
            result.setEndTime(this.extractEnd(splitFields[POSITION_END]));
            result.setPriority(this
                    .extractPriority(splitFields[POSITION_PRIORITY]));
            result.setCompletion(this
                    .extractIsComplete(splitFields[POSITION_IS_COMPLETE]));
            result.setFloating(this
                    .extractIsFloating(splitFields[POSITION_IS_FLOATING]));
            result.setGID(this.extractGoogleId(splitFields[POSITION_GOOGLE_ID]));
        } catch (ParseException e) {
            // TODO Test this
            throw new ParseException(ERROR_CANNOT_PARSE, e.getErrorOffset());
        }

        return result;
    }

    /**
     * Reads tasks from the log file and returns an arraylist of tasks.
     * 
     * @throws ParseException
     *             when task string read from log file is not parsed properly
     * @throws IOException
     *             when log file is not readable
     * @return arraylist of read tasks
     *
     */
    public ArrayList<Task> readTasks() throws IOException, ParseException {
        Path logPath = this.getLog().toPath();
        ArrayList<Task> result = new ArrayList<Task>();
        String aTaskString;

        try {
            reader = Files.newBufferedReader(logPath);
            // Always remove first header line, i.e. the line that says
            // "n tasks:", where n is the number of stored tasks.
            @SuppressWarnings("unused")
            String headerLineToDiscard = reader.readLine();

            while ((aTaskString = reader.readLine()) != null) {
                Task aTask = this.readTask(aTaskString);
                result.add(aTask);
            }
        } catch (IOException e) {
            throw new IOException(ERROR_CANNOT_OPEN_LOG, e);
        } finally {
            if (reader != null) {
                reader.close();
            }
        }
        return result;
    }
}
	// End of segment: .\taskbuddy\database\TaskLogger.java





